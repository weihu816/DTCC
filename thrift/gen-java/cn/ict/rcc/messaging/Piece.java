/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.ict.rcc.messaging;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Piece implements org.apache.thrift.TBase<Piece, Piece._Fields>, java.io.Serializable, Cloneable, Comparable<Piece> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Piece");

  private static final org.apache.thrift.protocol.TField VERTEXS_FIELD_DESC = new org.apache.thrift.protocol.TField("vertexs", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TRANSACTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IMMEDIATE_FIELD_DESC = new org.apache.thrift.protocol.TField("immediate", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PieceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PieceTupleSchemeFactory());
  }

  public List<Vertex> vertexs; // required
  public String transactionId; // required
  public String table; // required
  public String key; // required
  public boolean immediate; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERTEXS((short)1, "vertexs"),
    TRANSACTION_ID((short)2, "transactionId"),
    TABLE((short)3, "table"),
    KEY((short)4, "key"),
    IMMEDIATE((short)5, "immediate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERTEXS
          return VERTEXS;
        case 2: // TRANSACTION_ID
          return TRANSACTION_ID;
        case 3: // TABLE
          return TABLE;
        case 4: // KEY
          return KEY;
        case 5: // IMMEDIATE
          return IMMEDIATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMMEDIATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERTEXS, new org.apache.thrift.meta_data.FieldMetaData("vertexs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vertex.class))));
    tmpMap.put(_Fields.TRANSACTION_ID, new org.apache.thrift.meta_data.FieldMetaData("transactionId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMMEDIATE, new org.apache.thrift.meta_data.FieldMetaData("immediate", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Piece.class, metaDataMap);
  }

  public Piece() {
  }

  public Piece(
    List<Vertex> vertexs,
    String transactionId,
    String table,
    String key,
    boolean immediate)
  {
    this();
    this.vertexs = vertexs;
    this.transactionId = transactionId;
    this.table = table;
    this.key = key;
    this.immediate = immediate;
    setImmediateIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Piece(Piece other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVertexs()) {
      List<Vertex> __this__vertexs = new ArrayList<Vertex>(other.vertexs.size());
      for (Vertex other_element : other.vertexs) {
        __this__vertexs.add(new Vertex(other_element));
      }
      this.vertexs = __this__vertexs;
    }
    if (other.isSetTransactionId()) {
      this.transactionId = other.transactionId;
    }
    if (other.isSetTable()) {
      this.table = other.table;
    }
    if (other.isSetKey()) {
      this.key = other.key;
    }
    this.immediate = other.immediate;
  }

  public Piece deepCopy() {
    return new Piece(this);
  }

  @Override
  public void clear() {
    this.vertexs = null;
    this.transactionId = null;
    this.table = null;
    this.key = null;
    setImmediateIsSet(false);
    this.immediate = false;
  }

  public int getVertexsSize() {
    return (this.vertexs == null) ? 0 : this.vertexs.size();
  }

  public java.util.Iterator<Vertex> getVertexsIterator() {
    return (this.vertexs == null) ? null : this.vertexs.iterator();
  }

  public void addToVertexs(Vertex elem) {
    if (this.vertexs == null) {
      this.vertexs = new ArrayList<Vertex>();
    }
    this.vertexs.add(elem);
  }

  public List<Vertex> getVertexs() {
    return this.vertexs;
  }

  public Piece setVertexs(List<Vertex> vertexs) {
    this.vertexs = vertexs;
    return this;
  }

  public void unsetVertexs() {
    this.vertexs = null;
  }

  /** Returns true if field vertexs is set (has been assigned a value) and false otherwise */
  public boolean isSetVertexs() {
    return this.vertexs != null;
  }

  public void setVertexsIsSet(boolean value) {
    if (!value) {
      this.vertexs = null;
    }
  }

  public String getTransactionId() {
    return this.transactionId;
  }

  public Piece setTransactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  public void unsetTransactionId() {
    this.transactionId = null;
  }

  /** Returns true if field transactionId is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionId() {
    return this.transactionId != null;
  }

  public void setTransactionIdIsSet(boolean value) {
    if (!value) {
      this.transactionId = null;
    }
  }

  public String getTable() {
    return this.table;
  }

  public Piece setTable(String table) {
    this.table = table;
    return this;
  }

  public void unsetTable() {
    this.table = null;
  }

  /** Returns true if field table is set (has been assigned a value) and false otherwise */
  public boolean isSetTable() {
    return this.table != null;
  }

  public void setTableIsSet(boolean value) {
    if (!value) {
      this.table = null;
    }
  }

  public String getKey() {
    return this.key;
  }

  public Piece setKey(String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public boolean isImmediate() {
    return this.immediate;
  }

  public Piece setImmediate(boolean immediate) {
    this.immediate = immediate;
    setImmediateIsSet(true);
    return this;
  }

  public void unsetImmediate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMMEDIATE_ISSET_ID);
  }

  /** Returns true if field immediate is set (has been assigned a value) and false otherwise */
  public boolean isSetImmediate() {
    return EncodingUtils.testBit(__isset_bitfield, __IMMEDIATE_ISSET_ID);
  }

  public void setImmediateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMMEDIATE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERTEXS:
      if (value == null) {
        unsetVertexs();
      } else {
        setVertexs((List<Vertex>)value);
      }
      break;

    case TRANSACTION_ID:
      if (value == null) {
        unsetTransactionId();
      } else {
        setTransactionId((String)value);
      }
      break;

    case TABLE:
      if (value == null) {
        unsetTable();
      } else {
        setTable((String)value);
      }
      break;

    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((String)value);
      }
      break;

    case IMMEDIATE:
      if (value == null) {
        unsetImmediate();
      } else {
        setImmediate((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERTEXS:
      return getVertexs();

    case TRANSACTION_ID:
      return getTransactionId();

    case TABLE:
      return getTable();

    case KEY:
      return getKey();

    case IMMEDIATE:
      return Boolean.valueOf(isImmediate());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERTEXS:
      return isSetVertexs();
    case TRANSACTION_ID:
      return isSetTransactionId();
    case TABLE:
      return isSetTable();
    case KEY:
      return isSetKey();
    case IMMEDIATE:
      return isSetImmediate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Piece)
      return this.equals((Piece)that);
    return false;
  }

  public boolean equals(Piece that) {
    if (that == null)
      return false;

    boolean this_present_vertexs = true && this.isSetVertexs();
    boolean that_present_vertexs = true && that.isSetVertexs();
    if (this_present_vertexs || that_present_vertexs) {
      if (!(this_present_vertexs && that_present_vertexs))
        return false;
      if (!this.vertexs.equals(that.vertexs))
        return false;
    }

    boolean this_present_transactionId = true && this.isSetTransactionId();
    boolean that_present_transactionId = true && that.isSetTransactionId();
    if (this_present_transactionId || that_present_transactionId) {
      if (!(this_present_transactionId && that_present_transactionId))
        return false;
      if (!this.transactionId.equals(that.transactionId))
        return false;
    }

    boolean this_present_table = true && this.isSetTable();
    boolean that_present_table = true && that.isSetTable();
    if (this_present_table || that_present_table) {
      if (!(this_present_table && that_present_table))
        return false;
      if (!this.table.equals(that.table))
        return false;
    }

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_immediate = true;
    boolean that_present_immediate = true;
    if (this_present_immediate || that_present_immediate) {
      if (!(this_present_immediate && that_present_immediate))
        return false;
      if (this.immediate != that.immediate)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Piece other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVertexs()).compareTo(other.isSetVertexs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVertexs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vertexs, other.vertexs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionId()).compareTo(other.isSetTransactionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionId, other.transactionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImmediate()).compareTo(other.isSetImmediate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImmediate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.immediate, other.immediate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Piece(");
    boolean first = true;

    sb.append("vertexs:");
    if (this.vertexs == null) {
      sb.append("null");
    } else {
      sb.append(this.vertexs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionId:");
    if (this.transactionId == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("table:");
    if (this.table == null) {
      sb.append("null");
    } else {
      sb.append(this.table);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("immediate:");
    sb.append(this.immediate);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (vertexs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'vertexs' was not present! Struct: " + toString());
    }
    if (transactionId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'transactionId' was not present! Struct: " + toString());
    }
    if (table == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'table' was not present! Struct: " + toString());
    }
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'immediate' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PieceStandardSchemeFactory implements SchemeFactory {
    public PieceStandardScheme getScheme() {
      return new PieceStandardScheme();
    }
  }

  private static class PieceStandardScheme extends StandardScheme<Piece> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Piece struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERTEXS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.vertexs = new ArrayList<Vertex>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  Vertex _elem18;
                  _elem18 = new Vertex();
                  _elem18.read(iprot);
                  struct.vertexs.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setVertexsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRANSACTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionId = iprot.readString();
              struct.setTransactionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.table = iprot.readString();
              struct.setTableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMMEDIATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.immediate = iprot.readBool();
              struct.setImmediateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetImmediate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'immediate' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Piece struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.vertexs != null) {
        oprot.writeFieldBegin(VERTEXS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.vertexs.size()));
          for (Vertex _iter19 : struct.vertexs)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.transactionId != null) {
        oprot.writeFieldBegin(TRANSACTION_ID_FIELD_DESC);
        oprot.writeString(struct.transactionId);
        oprot.writeFieldEnd();
      }
      if (struct.table != null) {
        oprot.writeFieldBegin(TABLE_FIELD_DESC);
        oprot.writeString(struct.table);
        oprot.writeFieldEnd();
      }
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMMEDIATE_FIELD_DESC);
      oprot.writeBool(struct.immediate);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PieceTupleSchemeFactory implements SchemeFactory {
    public PieceTupleScheme getScheme() {
      return new PieceTupleScheme();
    }
  }

  private static class PieceTupleScheme extends TupleScheme<Piece> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Piece struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.vertexs.size());
        for (Vertex _iter20 : struct.vertexs)
        {
          _iter20.write(oprot);
        }
      }
      oprot.writeString(struct.transactionId);
      oprot.writeString(struct.table);
      oprot.writeString(struct.key);
      oprot.writeBool(struct.immediate);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Piece struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.vertexs = new ArrayList<Vertex>(_list21.size);
        for (int _i22 = 0; _i22 < _list21.size; ++_i22)
        {
          Vertex _elem23;
          _elem23 = new Vertex();
          _elem23.read(iprot);
          struct.vertexs.add(_elem23);
        }
      }
      struct.setVertexsIsSet(true);
      struct.transactionId = iprot.readString();
      struct.setTransactionIdIsSet(true);
      struct.table = iprot.readString();
      struct.setTableIsSet(true);
      struct.key = iprot.readString();
      struct.setKeyIsSet(true);
      struct.immediate = iprot.readBool();
      struct.setImmediateIsSet(true);
    }
  }

}

